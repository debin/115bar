<?php/** * postgres 操作类 * @author ldb * @package library */class PgsqlHelper extends Singleton{    private $__link;    private $__host;    private $__user;    private $__password;    private $__dbname;    private $__port;    private $__lastConnectTime = 0;    private $__error;    public function connect($host, $user, $password, $dbname, $port=3306)    {        $now_time = time();        if ( $host==$this->__host && $user==$this->__user &&            $password==$this->__password && $port==$this->__port            && $dbname==$this->__dbname && $now_time-$this->__lastConnectTime < 60 ) {            return true;        } else {            $this->__host     = $host;            $this->__user     = $user;            $this->__password = $password;            $this->__port     = $port;            $this->__dbname   = $dbname;            $dns = "pgsql:host=$host;dbname=$dbname;";            $option = array(                // PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES "UTF8"',                PDO::ATTR_TIMEOUT            => 10,                PDO::CASE_LOWER              => true,                PDO::ATTR_PERSISTENT         => true,                PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,                "connect_timeout"            => 10,            );            $pdo = new PDO($dns, $user, $password,$option);            $this->__link = $pdo;            return true;        }    }    public function query($sql, array $input_parameters = array())    {        $rows = 0;        try {            $PDOStatement = $this->__link->prepare($sql);            $res          = $PDOStatement->execute($input_parameters);            $rows         = $PDOStatement->rowCount();        } catch (PDOException $e) {            throw new Exception($e->getMessage());        }        return $rows;    }    public function getOne($sql, array $input_parameters = array()) {        if (!preg_match("/LIMIT/i", $sql)) {            $sql = preg_replace("/[,;]$/i", '', trim($sql)) . " LIMIT 1 ";        }        try {            $PDOStatement = $this->__link->prepare($sql);            $rows         = $PDOStatement->execute($input_parameters);            $res          = $PDOStatement->fetch(PDO::FETCH_ASSOC);        } catch(PDOException $e) {            throw new Exception($e->getMessage());        }        return $res;    }    public function getAll($sql, array $input_parameters = array(), $mode = PDO::FETCH_ASSOC) {        try {            $PDOStatement = $this->__link->prepare($sql);            $rows         = $PDOStatement->execute($input_parameters);            $res   = $PDOStatement->fetchAll($mode);        } catch (PDOException $e) {            throw new Exception($e->getMessage());        }        return $res;    }    public function insert( $table,array $data ){        //Make sure the array isn't empty        if (empty($data)) {            // $this->error = 'the variable' . $data. ' is empty';            throw new Exception("insert data is empty");        }        $sql = 'INSERT INTO "'.$table .'"';        $fields = array();        $values = array();        $input_parameters = array();        foreach ($data as $field => $value) {            $fields[] = '"' . $field . '"';            $values[] = '?';            $input_parameters[] = $value;        }        $fields = ' (' . implode(', ', $fields) . ')';        $values = '('. implode(', ', $values) .')';        $sql .= $fields .' VALUES '. $values;        return $this->query($sql,$input_parameters);    }    public function update($table,array $set_data, array $where = array(), $limit = 0)    {        if (empty($set_data)) {            throw new Exception('the variable $set_data is empty');        }        $sql = 'UPDATE "'. $table . '" SET ';        $input_parameters = array();        foreach ($set_data as $field => $value) {            $updates[] = "\"$field\" = ?";            $input_parameters[] = $value;        }        $sql .= implode(', ', $updates);        //Add the $where clauses as needed        if (!empty($where)) {            foreach ($where as $field => $value) {                // $value = $value;                $clause[] = "\"$field\" = ?";                $input_parameters[] = $value;            }            $sql .= ' WHERE '. implode(' AND ', $clause);        }        // 更新行数        if (!empty($limit)) {            $sql .= ' LIMIT '. intval($limit);        }        return $this->query($sql, $input_parameters);    }    public function getError(){        return $this->__link->errorInfo();    }    public function getLastId(){        return $this->__link->lastInsertId();    }}